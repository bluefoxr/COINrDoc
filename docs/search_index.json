[["index.html", "COINr: An R Package for Composite Indicator Development and Analysis Chapter 1 Overview 1.1 Installation 1.2 Whats it for? 1.3 Quick-start guide", " COINr: An R Package for Composite Indicator Development and Analysis William Becker 2021-01-14 Chapter 1 Overview This documentation describes in detail the COINr package, which is an R package for developing and analysing composite indicators. At the moment, the documentation is very incomplete, and this is mostly here as a placeholder. However, this will be updated over time. 1.1 Installation COINr is currently under development, but a very limited very beta version can be installed via Github. First, install the devtools package if you dont already have it, then run: devtools::install_github(&quot;bluefoxr/COINr&quot;) This should directly install the package from Github, without any other steps. You may be asked to update packages. This might not be strictly necessary, so you can also try to skip this step. 1.2 Whats it for? COINr is the first fully-flexible development and analysis environment for composite indicators and scoreboards. It allows: Flexible and fast development of composite indicators with no limits on aggregation levels, numbers of indicators, highly flexible set of methodological choices. In-depth statistical analysis of indicators and results, including multivariate analysis, statistical reweighting, uncertainty and sensitivity analysis, etc. Interactive data exploration and visualisation via Shiny apps which can be hosted online. HTML widgets for incorporation in interactive markdown documents. 1.3 Quick-start guide COINr is highly customisable, but equally allows composite indicator construction in a few commands. Taking the built-in ASEM dataset, we can assemble a composite indicator in a few steps. library(COINr) # assemble basic composite indicator object from input data ASEM &lt;- coin_assemble(data_raw = ASEMIndData, metad = ASEMIndMeta, framewk = ASEMAggMeta) ## ----------------- ## Indicator codes cross-checked and OK. ## ----------------- ## Number of indicators = 49 ## Number of units = 51 ## Number of reference years of data = 1 ## Years from 2018 to 2018 ## Number of aggregation levels = 3 above indicator level. ## ----------------- ## Aggregation level 1 with 8 aggregate groups: Physical, ConEcFin, Political, Instit, P2P, Environ, Social, SusEcFin ## Cross-check between metadata and framework = OK. ## Aggregation level 2 with 2 aggregate groups: Conn, Sust ## Cross-check between metadata and framework = OK. ## Aggregation level 3 with 1 aggregate groups: Index ## Cross-check between metadata and framework = OK. ## ----------------- # denominate data using specifications in ASEMIndMeta ASEM &lt;- coin_denominate(ASEM) # normalise data ASEM &lt;- coin_normalise(ASEM, dset = &quot;Denominated&quot;) # Aggregate normalised data ASEM &lt;- coin_aggregate(ASEM, dset = &quot;Normalised&quot;) At this point, the dashboard for viewing the results interactively is still under development. Still, we can view a number of things. First, we may want to see the index structure: coin_plotframework(ASEM) This is an interactive HTML widget which can be embedded into HTML documents (such as this page). We can also analyse indicator statistics: library(reactable) library(magrittr) ASEM &lt;- coin_preanalyse(ASEM, dset = &quot;Raw&quot;) ASEM$Analysis$Raw$StatTable %&gt;% reactable::reactable(defaultPageSize = 5, highlight = TRUE, wrap = F) "],["introduction.html", "Chapter 2 Introduction 2.1 How to use COINr", " Chapter 2 Introduction The COINr package is a comprehensive development and analysis environment for composite indicators and scoreboards, featuring a range of tools for building, visualising and analysing. This vignette is a work in progress and will be expanded as the COINr project progresses. 2.1 How to use COINr There are two main ways to use COINr. The first is to use the functions as standalone tools for your own specific use. For example, coin_normalise.R will take a data frame as an input, and normalise the columns according to the options specified in its input, outputting another data frame. The second way is to work inside what Ill call the COINrverse (with tongue firmly in cheek). What this means is that all operations are performed on a single object, the COIN object, which stores all data, all analysis, parameters, and methodological choices made along the way. The COINrverse approach enables the full feature set of COINr, because some functions only work on COIN objects - for example, exporting all results to Excel in one command, or running an uncertainty/sensitivity analysis. Indeed, COINr is built mainly for COINrverse use, but functions have been written with the flexibility to also accommodate independent use where possible. More details on how the COINrverse works can be found in XXX. "],["terminology.html", "Chapter 3 Terminology", " Chapter 3 Terminology Lets clearly define a few terms first to avoid confusion later on. An indicator is a variable which has an observed value for each unit. Indicators might be things like life expectancy, CO2 emissions, number of tertiary graduates, and so on. A unit is one of the entities that you are comparing with indicators. Often, units are countries, but they could also be regions, universities, individuals or even competing policy options (the latter is the realm of multicriteria decision analysis). Together, indicators and units form the main input data frame for COINr (units as rows, and indicators as columns). "],["data-input.html", "Chapter 4 Data Input", " Chapter 4 Data Input The main starting point in COINr is to read in your data. To assemble a composite indicator, COINr needs three different inputs (data frames): Raw indicator data (containing values of indicators for each unit) Indicator metadata Aggregation metadata "],["imputation.html", "Chapter 5 Imputation", " Chapter 5 Imputation Stuff. "],["denomination.html", "Chapter 6 Denomination 6.1 Example one 6.2 Example two", " Chapter 6 Denomination Some significant applications are demonstrated in this chapter. 6.1 Example one 6.2 Example two "],["normalisation.html", "Chapter 7 Normalisation", " Chapter 7 Normalisation Some stuff. "],["aggregation.html", "Chapter 8 Aggregation", " Chapter 8 Aggregation Stuff. "],["weighting.html", "Chapter 9 Weighting 9.1 Approaches to weighting 9.2 Interactive re-weighting with ReW8R 9.3 Automatic re-weighting 9.4 Manual re-weighting", " Chapter 9 Weighting Strictly speaking, weighting comes before aggregation. However, in order to understand the effects of weights, we need to aggregate the index first. Weighting in composite indicators is a thorny issue, which attracts considerable attention and is often one of the main focuses of critics. 9.1 Approaches to weighting Outline of some key approaches 9.2 Interactive re-weighting with ReW8R A description 9.3 Automatic re-weighting The weight optimisation algorithm 9.4 Manual re-weighting Further options for weighting. "]]

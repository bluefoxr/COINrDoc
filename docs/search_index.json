[["index.html", "COINr: An R Package for Composite Indicator Development and Analysis Chapter 1 Overview 1.1 Installation 1.2 Whats it for? 1.3 Quick-start guide", " COINr: An R Package for Composite Indicator Development and Analysis William Becker 2021-02-01 Chapter 1 Overview This documentation describes in detail the COINr package, which is an R package for developing and analysing composite indicators. At the moment, the documentation is very incomplete, and this is mostly here as a placeholder. However, this will be updated over time. 1.1 Installation COINr is currently under development, but a very limited very beta version can be installed via Github. First, install the devtools package if you dont already have it, then run: devtools::install_github(&quot;bluefoxr/COINr&quot;) This should directly install the package from Github, without any other steps. You may be asked to update packages. This might not be strictly necessary, so you can also try to skip this step. 1.2 Whats it for? COINr is the first fully-flexible development and analysis environment for composite indicators and scoreboards. It allows: Flexible and fast development of composite indicators with no limits on aggregation levels, numbers of indicators, highly flexible set of methodological choices. In-depth statistical analysis of indicators and results, including multivariate analysis, statistical reweighting, uncertainty and sensitivity analysis, etc. Interactive data exploration and visualisation via Shiny apps which can be hosted online. HTML widgets for incorporation in interactive markdown documents. 1.3 Quick-start guide COINr is highly customisable, but equally allows composite indicator construction in a few commands. Taking the built-in ASEM dataset, we can assemble a composite indicator in a few steps. library(COINr) # assemble basic composite indicator object from input data ASEM &lt;- coin_assemble(IndData = ASEMIndData, IndMeta = ASEMIndMeta, AggMeta = ASEMAggMeta) ## ----------------- ## Indicator codes cross-checked and OK. ## ----------------- ## Number of indicators = 49 ## Number of units = 51 ## Number of reference years of data = 1 ## Years from 2018 to 2018 ## Number of aggregation levels = 3 above indicator level. ## ----------------- ## Aggregation level 1 with 8 aggregate groups: Physical, ConEcFin, Political, Instit, P2P, Environ, Social, SusEcFin ## Cross-check between metadata and framework = OK. ## Aggregation level 2 with 2 aggregate groups: Conn, Sust ## Cross-check between metadata and framework = OK. ## Aggregation level 3 with 1 aggregate groups: Index ## Cross-check between metadata and framework = OK. ## ----------------- # denominate data using specifications in ASEMIndMeta ASEM &lt;- coin_denominate(ASEM) # normalise data ASEM &lt;- coin_normalise(ASEM, dset = &quot;Denominated&quot;) # Aggregate normalised data ASEM &lt;- coin_aggregate(ASEM, dset = &quot;Normalised&quot;) At this point, the dashboard for viewing the results interactively is still under development. Still, we can view a number of things. First, we may want to see the index structure: coin_plotframework(ASEM) This is an interactive HTML widget which can be embedded into HTML documents (such as this page). We can also analyse indicator statistics: library(reactable) library(magrittr) ASEM &lt;- coin_preanalyse(ASEM, dset = &quot;Raw&quot;) ASEM$Analysis$Raw$StatTable %&gt;% reactable::reactable(defaultPageSize = 5, highlight = TRUE, wrap = F) "],["introduction.html", "Chapter 2 Introduction 2.1 How to use COINr", " Chapter 2 Introduction The COINr package is a comprehensive development and analysis environment for composite indicators and scoreboards, featuring a range of tools for building, visualising and analysing. This vignette is a work in progress and will be expanded as the COINr project progresses. 2.1 How to use COINr There are two main ways to use COINr. The first is to use the functions as standalone tools for your own specific use. For example, coin_normalise.R will take a data frame as an input, and normalise the columns according to the options specified in its input, outputting another data frame. The second way is to work inside what Ill call the COINrverse (with tongue firmly in cheek). What this means is that all operations are performed on a single object, the COIN object, which stores all data, all analysis, parameters, and methodological choices made along the way. The COINrverse approach enables the full feature set of COINr, because some functions only work on COIN objects - for example, exporting all results to Excel in one command, or running an uncertainty/sensitivity analysis. Indeed, COINr is built mainly for COINrverse use, but functions have been written with the flexibility to also accommodate independent use where possible. More details on how the COINrverse works can be found in XXX. "],["terminology.html", "Chapter 3 Terminology", " Chapter 3 Terminology Lets clearly define a few terms first to avoid confusion later on. An indicator is a variable which has an observed value for each unit. Indicators might be things like life expectancy, CO2 emissions, number of tertiary graduates, and so on. A unit is one of the entities that you are comparing with indicators. Often, units are countries, but they could also be regions, universities, individuals or even competing policy options (the latter is the realm of multicriteria decision analysis). Together, indicators and units form the main input data frame for COINr (units as rows, and indicators as columns). "],["data-input.html", "Chapter 4 Data Input", " Chapter 4 Data Input The main starting point in COINr is to read in your data. To assemble a composite indicator, COINr needs three different inputs (data frames): Raw indicator data (containing values of indicators for each unit) Indicator metadata Aggregation metadata "],["imputation.html", "Chapter 5 Imputation 5.1 By indicators 5.2 By units", " Chapter 5 Imputation Imputation is the process of estimating missing data points. This can be done in any number of ways, and as usual, the best way depends on the problem. 5.1 By indicators Column-wise imputation means 5.2 By units A similar but alternative approach is to use values of other units to estimate the missing point. Typically, this could involve the sample mean or median of the indicator. Heres some data from the ASEM data set regarding the average connection speed of each country. Towards the end there are some missing values, so lets view the last few rows: library(COINr) Ind1 &lt;- data.frame(Country = ASEMIndData$UnitName, ConSpeed = ASEMIndData$ConSpeed) Ind1[40:nrow(Ind1),] ## Country ConSpeed ## 40 Korea 28.6 ## 41 Lao PDR NA ## 42 Malaysia 8.9 ## 43 Mongolia NA ## 44 Myanmar NA ## 45 New Zealand 14.7 ## 46 Pakistan NA ## 47 Philippines 5.5 ## 48 Russian Federation 11.8 ## 49 Singapore 20.3 ## 50 Thailand 16.0 ## 51 Vietnam 9.5 Using our simple imputation method, we just replace the NA values with the sample mean. Ind1$ConSpeed &lt;- replace(Ind1$ConSpeed, is.na(Ind1$ConSpeed), mean(Ind1$ConSpeed, na.rm = T)) Ind1[40:nrow(Ind1),] ## Country ConSpeed ## 40 Korea 28.60000 ## 41 Lao PDR 14.28605 ## 42 Malaysia 8.90000 ## 43 Mongolia 14.28605 ## 44 Myanmar 14.28605 ## 45 New Zealand 14.70000 ## 46 Pakistan 14.28605 ## 47 Philippines 5.50000 ## 48 Russian Federation 11.80000 ## 49 Singapore 20.30000 ## 50 Thailand 16.00000 ## 51 Vietnam 9.50000 "],["denomination.html", "Chapter 6 Denomination 6.1 Example one 6.2 Example two", " Chapter 6 Denomination Some significant applications are demonstrated in this chapter. 6.1 Example one 6.2 Example two "],["normalisation.html", "Chapter 7 Normalisation", " Chapter 7 Normalisation Some stuff. "],["aggregation.html", "Chapter 8 Aggregation", " Chapter 8 Aggregation Stuff. "],["weighting.html", "Chapter 9 Weighting 9.1 Approaches to weighting 9.2 Interactive re-weighting with ReW8R 9.3 Automatic re-weighting 9.4 Manual re-weighting", " Chapter 9 Weighting Strictly speaking, weighting comes before aggregation. However, in order to understand the effects of weights, we need to aggregate the index first. Weighting in composite indicators is a thorny issue, which attracts considerable attention and is often one of the main focuses of critics. 9.1 Approaches to weighting Outline of some key approaches 9.2 Interactive re-weighting with ReW8R A description 9.3 Automatic re-weighting The weight optimisation algorithm 9.4 Manual re-weighting Further options for weighting. "],["helper-functions.html", "Chapter 10 Helper functions 10.1 Getting a whole data set 10.2 Getting specific indicators 10.3 Getting indicators belonging to an aggregation group 10.4 Getting aggregate group data at targeted level 10.5 Use with data frames", " Chapter 10 Helper functions The getIn() function is widely used by many COINr functions. It is used for selecting specific data sets, and returning subsets of indicators. While some of this can be achieved fairly easily with base R, or dplyr::select(), subsetting in a hierarchical context can be more awkward. Thats where getIn() steps in to help. Lets take some examples: 10.1 Getting a whole data set Explanation using ASEM data 10.2 Getting specific indicators Explanation using ASEM data, also of getting aggregate group data 10.3 Getting indicators belonging to an aggregation group Explanation using ASEM data, also multiple groups 10.4 Getting aggregate group data at targeted level Explanation using ASEM data 10.5 Use with data frames Examples with just data frames "],["appendix-r-resources.html", "Chapter 11 Appendix: R Resources 11.1 Introduction to R 11.2 Advanced resources", " Chapter 11 Appendix: R Resources One of the great things about R is the sheer number of freely-available resources that are out there. Not just the software and packages, but also online books and materials to learn everything you need to know about pretty much anything. Here are a list of resources for users who (a) are interested in R and want to get started, and (b) are proficient R users but want to learn more. I am focusing here on resources that have really helped me in the work that I have done. Of course there is far more out there and you only have to look. 11.1 Introduction to R If youre just starting out, these are good places to start. R for Data Science is a modern classic that starts from the beginning and leads you into the world of R, from a data science perspective. It uses the tidyverse approach which is developed by R Guru Hadley Wickham. Even advanced users can probably learn something here. https://r4ds.had.co.nz/index.html Swirl is an R package which lets you learn R at the command line. Also very good for beginners. https://swirlstats.com/ 11.2 Advanced resources 11.2.1 Programming If you really want to sharpen your programming skills in R, Hadley Wickham has another book: this one digs around in the roots of R and teaches you all kinds of tricks and quirks. https://adv-r.hadley.nz/ Want to build your own R package? Hadley come to the rescue, again. https://r-pkgs.org/ 11.2.2 Visualisation Plotly is a big R package which generates interactive graphics using Javascript (there are many others, by the way). This book tells you all you need to know about that. https://plotly-r.com/ Shiny is another R package which lets you build interactive web apps based on R code. Its tricky to get your head around at first, but this book really helps. https://mastering-shiny.org/index.html 11.2.3 Other If youre not using GitHub, ask yourself, why not? GitHub is the best way to collaborate and share code, and you can also host documentation and websites. This book is hosted on GitHub, to take a random example. The Happy Git with R Book gives an easy introduction to hooking up R Studio to work seamlessly with Git and Github. https://happygitwithr.com/ You wouldnt think that R would be a good tool for writing books, but actually it turns out that its a pretty good tool for writing books. The Bookdown package lets you build nifty online books with a simple and neat layout. You can include equations and importantly, R code, outputs and HTML widgets, etc. https://bookdown.org/yihui/bookdown/ Finally, you wouldnt think that R would be a good tool for building website, but actually it turns out its a pretty good tool for building websites. OK, yes, if you want to build something really complicated and/or highly customised, then its not the way forward. But for building fairly simple sites and blogs, personal pages etc (especially if you want to stick in some R code), then the Blogdown package gives a great way to do this. And guess what, you can link it to Github and it automatically updates your website when you push any changes from R Studio. And its all free. An example of this is my very humble website which you can find at http://www.bluefoxdata.eu. Whats that you say, if only there were a book to teach me how to do all this? Well youre in luck - here it is. https://bookdown.org/yihui/blogdown/ "]]
